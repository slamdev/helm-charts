# replicaCount -- number of replicas for docker-registry deployment.
replicaCount: 1

image:
  # image.repository -- image repository
  repository: registry
  # image.tag -- image tag (chart's appVersion value will be used if not set)
  tag: ""
  # image.pullPolicy -- image pull policy
  pullPolicy: IfNotPresent

# imagePullSecrets -- image pull secret for private images
imagePullSecrets: [ ]
# nameOverride -- override name of the chart
nameOverride: ""
# fullnameOverride -- full name of the chart.
fullnameOverride: ""

serviceAccount:
  # serviceAccount.create -- specifies whether a service account should be created
  create: false
  # serviceAccount.annotations -- annotations to add to the service account
  annotations: { }
  # serviceAccount.name -- the name of the service account to use; if not set and create is true, a name is generated using the fullname template
  name:

# deploymentAnnotations -- annotations to add to the deployment
deploymentAnnotations: { }

# podSecurityContext -- specifies security settings for a pod
podSecurityContext: { }
# fsGroup: 2000

# securityContext -- specifies security settings for a container
securityContext: { }
#  capabilities:
#    drop:
#      - ALL
#  readOnlyRootFilesystem: true
#  runAsNonRoot: true
#  runAsUser: 1000

# containerPorts -- ports exposed by container
containerPorts:
  - name: http
    containerPort: 5000
    protocol: TCP

service:
  # service.annotations -- annotations to add to the service
  annotations: { }
  # service.type -- service type
  type: ClusterIP
  # service.ports -- service ports
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
  # service.loadBalancerSourceRanges -- traffic through the load-balancer will be restricted to the specified client IPs
  loadBalancerSourceRanges: [ ]

# resources -- custom resource configuration
resources: { }
#  limits:
#    cpu: 100m
#    memory: 128Mi
#  requests:
#    cpu: 100m
#    memory: 128Mi

# nodeSelector -- node for scheduler pod assignment
nodeSelector: { }

# tolerations -- tolerations for scheduler pod assignment
tolerations: [ ]

# affinity -- affinity for scheduler pod assignment
affinity: { }

# volumeMounts -- additional volume mounts
volumeMounts: [ ]
#  - name: cache
#    mountPath: /data/docker-registry/cache

# volumes -- additional volumes
volumes: [ ]
#  - name: cache
#    emptyDir: {}

livenessProbe:
  httpGet:
    # livenessProbe.httpGet.path -- path for liveness probe
    path: /
    # livenessProbe.httpGet.port -- port for liveness probe
    port: http

readinessProbe:
  httpGet:
    # readinessProbe.httpGet.path -- path for readiness probe
    path: /
    # readinessProbe.httpGet.port -- port for readiness probe
    port: http

# env -- additional environment variables for the deployment
env: [ ]
#  - name: SAMPLE
#    value: text

# config -- docker-registry config to provision inside of the container
config: |-
  http:
    addr: :5000

# additionalResources -- list of additional resources to create (are processed via `tpl` function)
additionalResources: [ ]
#  - |
#    apiVersion: v1
#    kind: ConfigMap
#    metadata:
#      name: {{ include "docker-registry.fullname" . }}-cm
#      namespace: {{ .Release.Namespace }}
#  - |
#     apiVersion: v1
#     kind: Secret
#     metadata:
#       name: {{ include "docker-registry.fullname" . }}-s
#       namespace: {{ .Release.Namespace }}
#     stringData:
#       mykey: my-value

garbageCollectCronJob:
  # garbageCollectCronJob.successfulJobsHistoryLimit -- the number of successful finished jobs to retain
  successfulJobsHistoryLimit: 3
  # garbageCollectCronJob.failedJobsHistoryLimit -- the number of failed finished jobs to retain
  failedJobsHistoryLimit: 1
  # garbageCollectCronJob.schedule -- the schedule in Cron format, see https://en.wikipedia.org/wiki/Cron
  schedule: "@daily"
  # garbageCollectCronJob.restartPolicy -- container restart policy
  restartPolicy: Never
  # garbageCollectCronJob.deleteUntagged -- delete manifests that are not currently referenced via tag
  deleteUntagged: true
  # garbageCollectCronJob.dryRun -- do everything except remove the blobs
  dryRun: false
  # garbageCollectCronJob.resources -- custom resource configuration
  resources: { }
#    limits:
#      cpu: 100m
#      memory: 128Mi
#    requests:
#      cpu: 100m
#      memory: 128Mi

cleanregCronJob:

  image:
    # cleanregCronJob.image.repository -- image repository
    repository: hcguersoy/cleanreg
    # cleanregCronJob.image.tag -- image tag (chart's appVersion value will be used if not set)
    tag: v0.8.1
    # cleanregCronJob.image.pullPolicy -- image pull policy
    pullPolicy: IfNotPresent

  # cleanregCronJob.imagePullSecrets -- image pull secret for private images
  imagePullSecrets: [ ]

  # cleanregCronJob.podSecurityContext -- specifies security settings for a pod
  podSecurityContext: { }
  # fsGroup: 2000

  # cleanregCronJob.securityContext -- specifies security settings for a container
  securityContext: { }
    #  capabilities:
    #    drop:
    #      - ALL
    #  readOnlyRootFilesystem: true
    #  runAsNonRoot: true
  #  runAsUser: 1000


  # cleanregCronJob.env -- additional environment variables for the deployment
  env: [ ]
    #  - name: SAMPLE
  #    value: text

  # cleanregCronJob.volumeMounts -- additional volume mounts
  volumeMounts: [ ]
  #  - name: cache
  #    mountPath: /data/docker-registry/cache

  # cleanregCronJob.volumes -- additional volumes
  volumes: [ ]
  #  - name: cache
  #    emptyDir: {}

  # cleanregCronJob.resources -- custom resource configuration
  resources: { }
  #  limits:
  #    cpu: 100m
  #    memory: 128Mi
  #  requests:
  #    cpu: 100m
  #    memory: 128Mi

  # cleanregCronJob.successfulJobsHistoryLimit -- the number of successful finished jobs to retain
  successfulJobsHistoryLimit: 3
  # cleanregCronJob.failedJobsHistoryLimit -- the number of failed finished jobs to retain
  failedJobsHistoryLimit: 1
  # cleanregCronJob.schedule -- the schedule in Cron format, see https://en.wikipedia.org/wiki/Cron
  schedule: "@daily"
  # cleanregCronJob.restartPolicy -- container restart policy
  restartPolicy: Never

  # cleanregCronJob.args -- args for cleanreg https://github.com/hcguersoy/cleanreg#usage
  args:
    - --registry=http://docker-registry
    - --assume-yes
    - --clean-full-catalog
    - --keepimages=10
    - --skip-tls-verify
    - --ignore-ref-tags
